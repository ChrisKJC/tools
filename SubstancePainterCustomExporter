import substance_painter
import substance_painter_plugins
from PySide6.QtWidgets import QWidget, QVBoxLayout, QHBoxLayout, QCheckBox, QLabel, QComboBox, QPushButton, QTableWidget, QTableWidgetItem, QDialog, QDialogButtonBox
from PySide6 import QtCore, QtGui

#Custom exporter modules export
import module_export
import module_validation_name
import module_validation_resolution

#default utils imports
import importlib
import os

importlib.reload(module_export)
importlib.reload(module_validation_name)
importlib.reload(module_validation_resolution)

custom_exporter = None


class CustomExporter:
	def __init__(self):
		self.initialisation()
		
		

	def initialisation(self):
		self.init_widget_window()
		self.connect_widget_events()
		self.connect_painter_events()
		self.show_ui_widget()

		#import ptvsd
		#port = 3000
		#ptvsd.enable_attach(address= ("localhost", port))
		#substance_painter.logging.log(substance_painter.logging.WARNING, "Custom Exporter", f"Waiting for the debugger to attach from VS in port {port}")
		


	def init_widget_window(self):
		self.asset_types = ["Props", "Weapons", "Characters"]
		self.shader_types = ["Basic", "Armament", "Morph"]
		self.textsets_with_overbudget_res = []
		self.widget = QWidget()
		self.widget.setObjectName("Custom Exporter")
		self.widget.setWindowTitle("Custom Exporter")

		self.file_dir = os.path.dirname(__file__)

		self.icons_path = os.path.join(self.file_dir, "icons")

		self.icon_main_window = QtGui.QIcon(os.path.join(self.icons_path, "main_window_icon.png"))
		self.icon_validation_ok = QtGui.QIcon(os.path.join(self.icons_path, "validation_ok.png"))
		self.icon_validation_fail = QtGui.QIcon(os.path.join(self.icons_path, "validation_fail.png"))
		self.pixmap_help = QtGui.QPixmap(os.path.join(self.icons_path, "help.png"))
		self.widget.setWindowIcon(self.icon_main_window)
		self.main_layout = QVBoxLayout(self.widget)

		# Help Icon
		help_layout = QHBoxLayout()
		help_layout.setAlignment(QtCore.Qt.AlignRight)
		help_label = QLabel()
		scaled_pixmap = self.pixmap_help.scaled(32, 32)
		help_label.setPixmap(scaled_pixmap)
		help_label.setFixedSize(scaled_pixmap.size())
		help_label.mousePressEvent = self.show_help
		help_label.setToolTip("Click for help documentation. \nHotkey: Alt + F1")
		help_layout.addWidget(help_label)
		self.main_layout.addLayout(help_layout)

		# Help action
		self.help_action = QtGui.QAction("show help")
		self.help_action.setShortcut(QtGui.QKeySequence(QtCore.Qt.Key.Key_Alt + QtCore.Qt.Key.Key_F1))
		self.widget.addAction(self.help_action)

		# Personal Export checkbox
		self.personal_export_cb = QCheckBox("Personal Export")
		self.personal_export_cb.setToolTip("Specify desired export path: Personal or Official")
		self.main_layout.addWidget(self.personal_export_cb)

		# Asset Type Lable
		self.asset_type_lbl = QLabel("Asset Type:")
		self.main_layout.addWidget(self.asset_type_lbl)

		# Asset Type Combo Box
		self.asset_type_cmbx = QComboBox()
		self.asset_type_cmbx.addItems(self.asset_types)
		self.asset_type_cmbx.setToolTip("Specify asset type. It will affect export path generation and texture set validations")
		self.main_layout.addWidget(self.asset_type_cmbx)

		# create refresh button
		self.refresh_table_btn = QPushButton("Refresh")
		self.refresh_table_btn.setToolTip("Refresh data in the table below. \nHotkey: Alt + R")
		self.refresh_table_btn.setShortcut(QtGui.QKeySequence(QtCore.Qt.Key.Key_Alt | QtCore.Qt.Key.Key_R))
		self.main_layout.addWidget(self.refresh_table_btn)

		# create table
		self.textset_table = QTableWidget()
		self.textset_table.setMinimumSize(730, 250)
		self.init_textset_table()
		self.main_layout.addWidget(self.textset_table)

		# Export Button
		self.export_btn = QPushButton("Export")
		self.export_btn.setToolTip("Trigger export of the selected texture sets. \nHotkey: Alt + E")
		self.export_btn.setShortcut(QtGui.QKeySequence(QtCore.Qt.Key.Key_Alt | QtCore.Qt.Key.Key_E))
		self.main_layout.addWidget(self.export_btn)

		if substance_painter.project.is_open():
			self.fill_textset_table()
			settings = QtCore.QSettings()
			settings.setValue("dialogue_window_checkbox_state", QtCore.Qt.Unchecked)
		

	def connect_widget_events(self):
		self.export_btn.clicked.connect(self.on_export_requested)
		self.refresh_table_btn.clicked.connect(self.on_refresh_textset_table)
		self.personal_export_cb.stateChanged.connect(self.on_refresh_textset_table)
		self.asset_type_cmbx.currentIndexChanged.connect(self. on_refresh_textset_table)
		self.help_action.triggered.connect(self.show_help)

	def connect_painter_events(self):
		painter_connections = {
			substance_painter.event.ProjectOpened : self.on_project_opened,
			substance_painter.event.ProjectCreated : self.on_project_created,
			substance_painter.event.ProjectAboutToClose : self.on_project_about_to_close,
			}

		for event, callback in painter_connections.items():
			substance_painter.event.DISPATCHER.connect(event, callback)


	def show_ui_widget(self):
		plugin = substance_painter_plugins.plugins.get("Custom Exporter", None)
		if plugin is not None:
			#refresh the widget
			self.delete_widget()
			self.init_widget_window()

		substance_painter.ui.add_dock_widget(self.widget)
		self.widget.show()

	def show_help(self, event):
		help_doc_path = os.path.join(self.file_dir, "Custom_Exporter_Help.pdf")
		help_url = QtCore.QUrl.fromLocalFile(help_doc_path)
		QtGui.QDesktopServices.openUrl(help_url)


	def delete_widget(self):
		if self.widget is not None:
			substance_painter.ui.delete_ui_element(self.widget)

	def init_textset_table(self):
		column_headers = ["Export", "Texture Set Type", "Shader Type", "Resolution", "Export Path", "Validation" ]
		num_columns = len(column_headers)
		num_rows = 0

		self.textset_table.setRowCount(num_rows)
		self.textset_table.setColumnCount(num_columns)

		self.textset_table.setHorizontalHeaderLabels(column_headers)

		self.textset_table.verticalHeader().setVisible(False)

		self.textset_table.setColumnWidth(0, 40)
		self.textset_table.setColumnWidth(3, 70)
		self.textset_table.setColumnWidth(4, 350)
		self.textset_table.setColumnWidth(5, 60)
		


	def fill_textset_table(self):
		self.all_texture_sets = substance_painter.textureset.all_texture_sets()
		self.textset_table.setRowCount(len(self.all_texture_sets))

		for i, texture_set in enumerate(self.all_texture_sets):
			# use QCheckbox for "export" column
			check_box = QCheckBox()
			check_box.setChecked(True)
			check_box.stateChanged.connect(self.grey_out_unchecked_rows)
			self.textset_table.setCellWidget(i, 0, check_box)

			# Texture set name column
			self.textset_table.setItem(i, 1, QTableWidgetItem(texture_set.name()))

			# Use Qcombobox for "shader type" column
			combo_box = QComboBox()
			combo_box.addItems(self.shader_types)
			combo_box.currentIndexChanged.connect(self.on_refresh_textset_table)
			combo_box.setToolTip("Specify type of the export preset to be used during export")
			self.textset_table.setCellWidget(i, 2, combo_box)
			

			# Resolution Column
			resolution = texture_set.get_resolution()
			width = resolution.width
			height = resolution.height
			self.textset_table.setItem(i, 3, QTableWidgetItem(f"{width} x {height}"))
		self.on_refresh_textset_table()

	def validate_texture_sets(self):
		asset_type = self.asset_type_cmbx.currentText()
		self.textsets_with_overbudget_res = []
		for i, texture_set in enumerate(self.all_texture_sets):
			res_is_valid, res_validation_details = module_validation_resolution.validate_res(asset_type, texture_set.get_resolution())
			validation_item = QTableWidgetItem()
			export_checkbox = self.textset_table.cellWidget(i, 0)
			if res_is_valid:
				name_is_valid, name_validation_details = module_validation_name.validate_name(asset_type, texture_set.name())
				if name_is_valid:
					validation_item.setIcon(self.icon_validation_ok)
					validation_item.setToolTip(f"Texture set validations are ok for texture set {i +1} \
												\n{texture_set.name()} \
												\nGood job!")
					export_checkbox.setToolTip(f"Specify if texture set #{i+1}: {texture_set.name()} \
												should be processed during export or skipped.")
				else:
					validation_item.setIcon(self.icon_validation_fail)
					validation_item.setToolTip(f"Texture set name validation is FAILED for texture set {i +1} \
												\n{texture_set.name()} \
												\nReason: {name_validation_details} \
												\nExport of this texture set is forcibly disabled until validation is passed.")
					export_checkbox.setToolTip(f"Texture set name validation is FAILED for texture set {i +1} \
												\n{texture_set.name()} \
												\nReason: {name_validation_details} \
												\nExport of this texture set is forcibly disabled until validation is passed.")
			else:
				validation_item.setIcon(self.icon_validation_fail)
				validation_item.setToolTip(f"Texture set resolution validation is FAILED for texture set {i +1} \
											\n{texture_set.name()} \
											\nReason: {res_validation_details} \
											\nExport of this texture set is forcibly disabled until validation is passed.")
				export_checkbox.setToolTip(f"Texture set resolution validation is FAILED for texture set {i +1} \
											\n{texture_set.name()} \
											\nReason: {res_validation_details} \
											\nExport of this texture set is forcibly disabled until validation is passed.")		
				self.textsets_with_overbudget_res.append(texture_set)


			export_checkbox.setChecked(res_is_valid and name_is_valid)
			export_checkbox.setEnabled(res_is_valid and name_is_valid)
			self.textset_table.setItem(i, 5, validation_item)

		if len(self.textsets_with_overbudget_res) > 0:
			self.open_dialog_res_confirmation()

	def open_dialog_res_confirmation(self):
		settings = QtCore.QSettings()
		if settings.value("dialogue_window_checkbox_state", QtCore.Qt.Unchecked) == QtCore.Qt.Unchecked:
			dialog = DialogWindow(self.icon_main_window)
			if dialog.exec_() == QDialog.Accepted:
				self.apply_required_res()
				self.on_refresh_textset_table()
			else:
				substance_painter.logging.log(severity = substance_painter.logging.WARNING, 
								  				channel = "Custom Exporter", 
												message = "Remember to manually fix the resolution in texture settings. Validation error will occur on export")
		else:
			substance_painter.logging.log(severity = substance_painter.logging.INFO, 
								  		channel = "Custom Exporter", 
										message = "dialog for resolution validation autofix was not triggered as per user settings")

	def apply_required_res(self):
		required_width, required_height = module_validation_resolution.get_required_res_from_asset_type(self.asset_type_cmbx.currentText())
		required_res = substance_painter.textureset.Resolution(required_width, required_height)
		for texture_set in self.textsets_with_overbudget_res:
			original_res = texture_set.get_resolution()
			texture_set.set_resolution(required_res)
			substance_painter.logging.log(severity= substance_painter.logging.INFO,
								 			channel= "Custom Exporter",
											message = f"Applied the required resolution for texture set {texture_set.name()} \
												\nWas: {original_res}; Now {required_res}")

	def grey_out_unchecked_rows(self):
		for i in range(self.textset_table.rowCount()):
			check_box_item = self.textset_table.cellWidget(i, 0)
			if check_box_item.isChecked():
				for j in range(1, self.textset_table.columnCount()-1):
					item = self.textset_table.item(i, j)
					if item is not None:
						item.setFlags(item.flags() | QtCore.Qt.ItemIsEnabled)
					else:
						cell_widget = self.textset_table.cellWidget(i, j)
						if cell_widget is not None:
							cell_widget.setEnabled(True)
			else:
				for j in range(1, self.textset_table.columnCount()-1):
					item = self.textset_table.item(i, j)
					if item is not None:
						item.setFlags(item.flags() & ~QtCore.Qt.ItemIsEnabled)
					else:
						cell_widget = self.textset_table.cellWidget(i, j)
						if cell_widget is not None:
							cell_widget.setDisabled(True)


	def on_refresh_textset_table(self):
		if substance_painter.project.is_open():
			export_path_root = self.build_root_export_path()
			if self.all_texture_sets is not None:
				for i, texture_set in enumerate(self.all_texture_sets):
					# Texture set name column
					self.textset_table.setItem(i, 1, QTableWidgetItem(texture_set.name()))

					# Resolution Column
					resolution = texture_set.get_resolution()
					width = resolution.width
					height = resolution.height
					self.textset_table.setItem(i, 3, QTableWidgetItem(f"{width} x {height}"))

					# Export Path Column

					self.textset_table.setItem(i, 4, QTableWidgetItem(f"{export_path_root}/{self.asset_type_cmbx.currentText()}/{texture_set.name()}_{self.textset_table.cellWidget(i, 2).currentText()}/"))

				self.validate_texture_sets()
				self.grey_out_unchecked_rows()

				self.set_column_read_only(1) # Texture set name column to read only
				self.set_column_read_only(3) # Resolution column to read only
				self.set_column_read_only(4) # Export path column to read only
				self.set_column_read_only(5) # Validation column to read only

	def set_column_read_only(self, column_index):
		for row in range(self.textset_table.rowCount()):
			item = self.textset_table.item(row, column_index)
			if item is not None:
				item.setFlags(item.flags() & ~QtCore.Qt.ItemIsEditable)

	def build_root_export_path(self):
		if self.personal_export_cb.isChecked():
			root = "C:/ProjectName/Personal"
		else:
			root = "C:/ProjectName/Assets/Textures"
		return root
			
	def on_export_requested(self):
		if self.all_texture_sets != None:
			for i in range(len(self.all_texture_sets)):
				should_export = self.textset_table.cellWidget(i, 0).isChecked()
				if not should_export:
					continue

				textset_name = self.textset_table.item(i, 1).text()				
				shader_type = self.textset_table.cellWidget(i, 2).currentText()
				export_path = self.textset_table.item(i, 4).text()

				module_export.export_textures(textset_name, shader_type, export_path)
		
		
			
	def on_project_opened(self, e):
		substance_painter.logging.log(substance_painter.logging.INFO, "Custom Exporter", f"Project {substance_painter.project.name()} opened")
		self.fill_textset_table()
		

	def on_project_created(self, e):
		substance_painter.logging.log(substance_painter.logging.INFO, "Custom Exporter", "Project has been created")
		self.fill_textset_table()

	def on_project_about_to_close(self, e):
		self.init_textset_table()
		



class DialogWindow(QDialog):
	def __init__(self, icon):
		super().__init__()
		self.setWindowTitle("Texture Set Resolution is over budget")
		self.setWindowIcon(icon)
		self.setFixedSize(600, 160)

		layout = QVBoxLayout(self)

		text_label = QLabel("There is a validation error in the resolution check step.\nBut, no worries, the tool can automatically adjust the resolution of all texture sets that do not meet requirements.\nDo you want to proceed?")
		layout.addWidget(text_label)

		buttons = QDialogButtonBox(QDialogButtonBox.Yes | QDialogButtonBox.No)
		buttons.accepted.connect(self.accept)
		buttons.rejected.connect(self.reject)
		buttons.button(QDialogButtonBox.Yes).setText("Yes, apply the required resolution for all texture sets.")
		buttons.button(QDialogButtonBox.No).setText("No, I'll modify the resolution manually.")
		layout.addWidget(buttons)

		checkbox = QCheckBox("Do not show this window again")
		checkbox.setChecked(False)
		checkbox.stateChanged.connect(self.save_checkbox_state)
		layout.addWidget(checkbox)


		
	def save_checkbox_state(self, state):
		settings = QtCore.QSettings()
		settings.setValue("dialogue_window_checkbox_state", state)



def start_plugin():
	global custom_exporter
	custom_exporter = CustomExporter()
	
def close_plugin():
	global custom_exporter
	custom_exporter.delete_widget()

if __name__ == "__main__":
	start_plugin()
